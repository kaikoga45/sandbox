# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  git-tag-management:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      # Specify the version you desire here
      # See: https://circleci.com/developer/images/image/cimg/base
      - image: cimg/base:current

    # Add steps to the job
    # See: https://circleci.com/docs/jobs-steps/#steps-overview & https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Create/Update Repo Tag"
          command: |
            # Extract the semantic version and build number from 'pubspec.yaml'
            latest_tag=$(grep 'version:' pubspec.yaml | cut -d ' ' -f 2 | cut -d '+' -f 1)
            latest_build=$(grep 'version:' pubspec.yaml | cut -d ' ' -f 2 | cut -d '+' -f 2)

            # Check if 'pubspec.yaml' was changed in the latest commit
            if git diff --name-only HEAD^ | grep -q 'pubspec.yaml'; then
              # Check if the build number was changed
              if git diff HEAD^ pubspec.yaml | grep -q "+version: $latest_tag+$latest_build"; then
                # If the build number was changed, delete the existing tag with the version and create a new one
                # This is to ensure that the tag always points to the latest commit with the same version
                if git tag | grep -q "^$latest_tag$"; then
                  git tag -d $latest_tag
                  git push origin :refs/tags/$latest_tag
                fi
                git tag $latest_tag
                git push origin $latest_tag
              else
                # If the build number was not changed, this means the semantic version was changed
                # So, create a new tag with the version
                if git tag | grep -q "^$latest_tag$"; then
                  git tag -d $latest_tag
                  git push origin :refs/tags/$latest_tag
                fi
                git tag $latest_tag
                git push origin $latest_tag
              fi
              else
                # Check if any files other than .dart files were changed in the latest commit
                if git diff --name-only HEAD~1..HEAD | grep -vq '\.dart$'; then
                  echo "Error: Non-Dart files were changed. This is not allowed for patch deployments. Please create a release branch and update the pubspec version accordingly."
                  exit 1
                fi
                # If 'pubspec.yaml' was not changed in the latest commit, this means we're dealing with a hotfix
                # So, check if there's a 'hotfix' tag with the version
                if git tag | grep -q "^$latest_tag+hotfix$"; then
                  # If a 'hotfix' tag with the version exists, delete it and create a new one
                  # This is to ensure that the 'hotfix' tag always points to the latest hotfix commit with the same version
                  git tag -d $latest_tag+hotfix
                  git push origin :refs/tags/$latest_tag+hotfix          
                fi
                # Create a new 'hotfix' tag with the version
                git tag $latest_tag+hotfix
                git push origin $latest_tag+hotfix
              fi

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  shell_script: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - git-tag-management